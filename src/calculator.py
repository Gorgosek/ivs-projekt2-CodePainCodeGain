# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QDialog, QVBoxLayout, QLabel
import sys
from calculatormathlib import CalculatorMathLib

# Class for help window
class HelpWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Help")
        layout = QVBoxLayout()

        # Label pro zobrazení textu nápovědy
        self.help_label = QLabel()
        self.help_label.setText("Welcome to our calculator help guide!\n"
                        "Use the buttons on the calculator or keyboard to control the calculator.\n"
                        "The calculator automatically blocks some buttons that you cannot\ncurrently use due to syntax.\n"
                        "You can only amplify with natural exponents.\n"
                        "You can use these buttons on your keyboard:\n"
                        "Numbers\n"
                        "(+): Addition\n"
                        "(-): Subtraction\n"
                        "(*): Multiplication\n"
                        "(/): Division\n"
                        "(%): Modulo\n"
                        "(^ or p): Power\n"
                        "(r): Root\n"
                        "(!): Factorial\n"
                        "(.): Decimal point\n"
                        "(Delete or Backspace): Delete last character\n"
                        "(c): Clear all\n"
                        "(=): Result")
        layout.addWidget(self.help_label)

        # Tlačítko pro potvrzení a zavření okna
        confirm_button = QPushButton("Confirm")
        confirm_button.clicked.connect(self.confirm_and_close)
        # Added edit
        confirm_button.setStyleSheet("color: white;")
        layout.addWidget(confirm_button)
        # Added edits
        self.setLayout(layout)
        self.setFixedSize(500, 350)
        self.setStyleSheet("background-color: rgb(18, 25, 35);")
        self.help_label.setStyleSheet("color: white;")
        

    def confirm_and_close(self):
        self.accept()  # Zavření okna nápovědy

# Generated by QT Designer
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(560, 773)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(8)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("QWidget {\n"
"    background-color: rgb(18, 25, 35);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 170, 559, 551))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        # Button: NthRoot
        self.pushButton_NthRoot = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("√"))

        # Adding a keyboard shortcut for the nth root button
        shortcut_r = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_R), self.pushButton_NthRoot)
        shortcut_r.activated.connect(lambda: self.pressed("√"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_NthRoot.sizePolicy().hasHeightForWidth())
        self.pushButton_NthRoot.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_NthRoot.setFont(font)
        self.pushButton_NthRoot.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_NthRoot.setObjectName("pushButton_NthRoot")
        self.gridLayout.addWidget(self.pushButton_NthRoot, 4, 4, 1, 1)

        # Button: Plus
        self.pushButton_Plus = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("+"))

        # Adding a keyboard shortcut for the plus button 
        shortcut_plus = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Plus), self.pushButton_Plus)
        shortcut_plus.activated.connect(lambda: self.pressed("+"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Plus.sizePolicy().hasHeightForWidth())
        self.pushButton_Plus.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Plus.setFont(font)
        self.pushButton_Plus.setStyleSheet("QPushButton {\n"
"    background-color: rgb(24,77,102); \n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_Plus.setObjectName("pushButton_Plus")
        self.gridLayout.addWidget(self.pushButton_Plus, 3, 3, 1, 1)

        # Button: 3
        self.pushButton_3 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("3"))

        # Adding a keyboard shortcut for the 3 button
        shortcut_3 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_3), self.pushButton_3)
        shortcut_3.activated.connect(lambda: self.pressed("3"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 3, 2, 1, 1)

        # Button: NthPower
        self.pushButton_NthPower = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("^"))

        # Adding a keyboard shortcut for the nth power button
        shortcut_p = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_P), self.pushButton_NthPower)
        shortcut_p.activated.connect(lambda: self.pressed("^"))
        shortcut_caret = QtWidgets.QShortcut(QtGui.QKeySequence("^"), self.pushButton_NthPower)
        shortcut_caret.activated.connect(lambda: self.pressed("^"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_NthPower.sizePolicy().hasHeightForWidth())
        self.pushButton_NthPower.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_NthPower.setFont(font)
        self.pushButton_NthPower.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_NthPower.setObjectName("pushButton_NthPower")
        self.gridLayout.addWidget(self.pushButton_NthPower, 2, 4, 1, 1)

        # Button: Minus
        self.pushButton_Minus = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("-"))

        # Adding a keyboard shortcut for the minus button
        shortcut_minus = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Minus), self.pushButton_Minus)
        shortcut_minus.activated.connect(lambda: self.pressed("-"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Minus.sizePolicy().hasHeightForWidth())
        self.pushButton_Minus.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Minus.setFont(font)
        self.pushButton_Minus.setStyleSheet("QPushButton {\n"
"    background-color: rgb(24,77,102); \n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_Minus.setObjectName("pushButton_Minus")
        self.gridLayout.addWidget(self.pushButton_Minus, 2, 3, 1, 1)

        # Button: DoubleNull
        self.pushButton_DoubleNull = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("00"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_DoubleNull.sizePolicy().hasHeightForWidth())
        self.pushButton_DoubleNull.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_DoubleNull.setFont(font)
        self.pushButton_DoubleNull.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_DoubleNull.setObjectName("pushButton_DoubleNull")
        self.gridLayout.addWidget(self.pushButton_DoubleNull, 4, 2, 1, 1)

        # Button: Equal
        self.pushButton_Equal = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_Equal.clicked.connect(self.solve_expression)

        # Adding a keyboard shortcut for the equal button
        shortcut_equal = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Equal), self.pushButton_Equal)
        shortcut_equal.activated.connect(self.solve_expression)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Equal.sizePolicy().hasHeightForWidth())
        self.pushButton_Equal.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Equal.setFont(font)
        self.pushButton_Equal.setStyleSheet("QPushButton {\n"
"    background-color: rgb(24,77,102); \n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_Equal.setObjectName("pushButton_Equal")
        self.gridLayout.addWidget(self.pushButton_Equal, 4, 3, 1, 1)

        # Button: SquareRoot
        self.pushButton_SquareRoot = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("²√"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_SquareRoot.sizePolicy().hasHeightForWidth())
        self.pushButton_SquareRoot.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_SquareRoot.setFont(font)
        self.pushButton_SquareRoot.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_SquareRoot.setObjectName("pushButton_SquareRoot")
        self.gridLayout.addWidget(self.pushButton_SquareRoot, 3, 4, 1, 1)

        # Button: Point
        self.pushButton_Point = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("."))

        # Adding a keyboard shortcut for the point button
        shortcut_point = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Period), self.pushButton_Point)
        shortcut_point.activated.connect(lambda: self.pressed("."))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Point.sizePolicy().hasHeightForWidth())
        self.pushButton_Point.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Point.setFont(font)
        self.pushButton_Point.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_Point.setObjectName("pushButton_Point")
        self.gridLayout.addWidget(self.pushButton_Point, 4, 0, 1, 1)

        # Button: 0
        self.pushButton_Null = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("0"))

        # Adding a keyboard shortcut for the 0 button
        shortcut_0 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_0), self.pushButton_Null)
        shortcut_0.activated.connect(lambda: self.pressed("0"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Null.sizePolicy().hasHeightForWidth())
        self.pushButton_Null.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Null.setFont(font)
        self.pushButton_Null.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_Null.setObjectName("pushButton_Null")
        self.gridLayout.addWidget(self.pushButton_Null, 4, 1, 1, 1)

        # Button: 1
        self.pushButton_1 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("1"))

        # Adding a keyboard shortcut for the 1 button
        shortcut_1 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_1), self.pushButton_1)
        shortcut_1.activated.connect(lambda: self.pressed("1"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_1.sizePolicy().hasHeightForWidth())
        self.pushButton_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_1.setObjectName("pushButton_1")
        self.gridLayout.addWidget(self.pushButton_1, 3, 0, 1, 1)

        # Button: Modus
        self.pushButton_Modus = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("%"))

        # Adding a keyboard shortcut for the modus button
        shortcut_modus = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Percent), self.pushButton_Modus)
        shortcut_modus.activated.connect(lambda: self.pressed("%"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Modus.sizePolicy().hasHeightForWidth())
        self.pushButton_Modus.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.pushButton_Modus.setFont(font)
        self.pushButton_Modus.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 29px; \n"
"}")
        self.pushButton_Modus.setText("%")
        self.pushButton_Modus.setObjectName("pushButton_Modus")
        self.gridLayout.addWidget(self.pushButton_Modus, 0, 2, 1, 1)

        # Button: Division
        self.pushButton_Division = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("÷"))

        # Adding a keyboard shortcut for the division button
        shortcut_division = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Slash), self.pushButton_Division)
        shortcut_division.activated.connect(lambda: self.pressed("÷"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Division.sizePolicy().hasHeightForWidth())
        self.pushButton_Division.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Division.setFont(font)
        self.pushButton_Division.setStyleSheet("QPushButton {\n"
"    background-color: rgb(24,77,102); \n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_Division.setObjectName("pushButton_Division")
        self.gridLayout.addWidget(self.pushButton_Division, 0, 3, 1, 1)

        # Button: Factorial
        self.pushButton_Factorial = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("!"))

        # Adding a keyboard shortcut for the factorial button
        shortcut_exclamation = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Exclam), self.pushButton_Factorial)
        shortcut_exclamation.activated.connect(lambda: self.pressed("!"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Factorial.sizePolicy().hasHeightForWidth())
        self.pushButton_Factorial.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.pushButton_Factorial.setFont(font)
        self.pushButton_Factorial.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 29px; \n"
"}")
        self.pushButton_Factorial.setObjectName("pushButton_Factorial")
        self.gridLayout.addWidget(self.pushButton_Factorial, 0, 1, 1, 1)

        # Button: 8
        self.pushButton_8 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("8"))

        # Adding a keyboard shortcut for the 8 button
        shortcut_8 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_8), self.pushButton_8)
        shortcut_8.activated.connect(lambda: self.pressed("8"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout.addWidget(self.pushButton_8, 1, 1, 1, 1)

        # Button: 4
        self.pushButton_4 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("4"))

        # Adding a keyboard shortcut for the 4 button
        shortcut_4 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_4), self.pushButton_4)
        shortcut_4.activated.connect(lambda: self.pressed("4"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 2, 0, 1, 1)

        # Button: AllClear
        self.pushButton_AllClear = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_AllClear.clicked.connect(self.clear_all)

        # Adding a keyboard shortcut for the AC button
        shortcut_c = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_C), self.centralwidget)
        shortcut_c.activated.connect(self.clear_all)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_AllClear.sizePolicy().hasHeightForWidth())
        self.pushButton_AllClear.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.pushButton_AllClear.setFont(font)
        self.pushButton_AllClear.setStyleSheet("QPushButton {\n"
"    background-color: rgb(16, 136, 195);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 29px; \n"
"}")
        self.pushButton_AllClear.setObjectName("pushButton_AllClear")
        self.gridLayout.addWidget(self.pushButton_AllClear, 0, 0, 1, 1)

        # Button: 2
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("2"))

        # Adding a keyboard shortcut for the 2 button
        shortcut_2 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_2), self.pushButton_2)
        shortcut_2.activated.connect(lambda: self.pressed("2"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 3, 1, 1, 1)

        # Button: 7
        self.pushButton_7 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("7"))

        # Adding a keyboard shortcut for the 7 button
        shortcut_7 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_7), self.pushButton_7)
        shortcut_7.activated.connect(lambda: self.pressed("7"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 1, 0, 1, 1)

        # Button: 9
        self.pushButton_9 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("9"))

        # Adding a keyboard shortcut for the 9 button
        shortcut_9 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_9), self.pushButton_9)
        shortcut_9.activated.connect(lambda: self.pressed("9"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout.addWidget(self.pushButton_9, 1, 2, 1, 1)

        # Button: 5
        self.pushButton_5 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("5"))

        # Adding a keyboard shortcut for the 5 button
        shortcut_5 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_5), self.pushButton_5)
        shortcut_5.activated.connect(lambda: self.pressed("5"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 2, 1, 1, 1)

        # Button: Delete
        self.pushButton_Delete = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_Delete.clicked.connect(self.delete)

        # Adding a keyboard shortcut for the delete button
        shortcut_delete = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Backspace), self.pushButton_Delete)
        shortcut_delete.activated.connect(self.delete)
        shortcut_delete = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Delete), self.pushButton_Delete)
        shortcut_delete.activated.connect(self.delete)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Delete.sizePolicy().hasHeightForWidth())
        self.pushButton_Delete.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.pushButton_Delete.setFont(font)
        self.pushButton_Delete.setStyleSheet("QPushButton {\n"
"    background-color: rgb(16, 136, 195);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 29px; \n"
"}")
        self.pushButton_Delete.setObjectName("pushButton_Delete")
        self.gridLayout.addWidget(self.pushButton_Delete, 0, 4, 1, 1)

        # Button: 6
        self.pushButton_6 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("6"))

        # Adding a keyboard shortcut for the 6 button
        shortcut_6 = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_6), self.pushButton_6)
        shortcut_6.activated.connect(lambda: self.pressed("6"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("QPushButton {\n"
"    background-color: rgb(18,61,82);\n"
"    color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px;\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 2, 2, 1, 1)

        # Button: Multiply
        self.pushButton_Multiply = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("×"))

        # Adding a keyboard shortcut for the multiply button
        shortcut_multiply = QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Asterisk), self.pushButton_Multiply)
        shortcut_multiply.activated.connect(lambda: self.pressed("×"))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_Multiply.sizePolicy().hasHeightForWidth())
        self.pushButton_Multiply.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Multiply.setFont(font)
        self.pushButton_Multiply.setStyleSheet("QPushButton {\n"
"    background-color: rgb(24,77,102); \n"
"    color: rgb(255, 255, 255); \n"
"    border: none; \n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_Multiply.setObjectName("pushButton_Multiply")
        self.gridLayout.addWidget(self.pushButton_Multiply, 1, 3, 1, 1)

        # Button: SecondPower
        self.pushButton_SecondPower = QtWidgets.QPushButton(self.gridLayoutWidget, clicked=lambda: self.pressed("^2"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(15)
        sizePolicy.setVerticalStretch(14)
        sizePolicy.setHeightForWidth(self.pushButton_SecondPower.sizePolicy().hasHeightForWidth())
        self.pushButton_SecondPower.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_SecondPower.setFont(font)
        self.pushButton_SecondPower.setStyleSheet("QPushButton {\n"
"    background-color: rgb(45, 117, 152);\n"
"    color: rgb(255, 255, 255); \n"
"    border: none;\n"
"    border-radius: 0px; \n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    font-size: 35px; \n"
"}")
        self.pushButton_SecondPower.setObjectName("pushButton_SecondPower")
        self.gridLayout.addWidget(self.pushButton_SecondPower, 1, 4, 1, 1)
        self.label_MainLabel = QtWidgets.QLabel(self.centralwidget)
        self.label_MainLabel.setGeometry(QtCore.QRect(20, 70, 511, 51))
        font = QtGui.QFont()
        font.setPointSize(40)
        self.label_MainLabel.setFont(font)
        self.label_MainLabel.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_MainLabel.setStyleSheet("QLabel { \n"
"    color : white;\n"
"}")
        self.label_MainLabel.setText("")
        self.label_MainLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_MainLabel.setObjectName("label_MainLabel")
        self.label_Help = QtWidgets.QLabel(self.centralwidget)
        self.label_Help.setGeometry(QtCore.QRect(10, 0, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_Help.setFont(font)
        self.label_Help.setStyleSheet("QLabel { \n"
"color : rgb(255, 255, 255);\n"
"}")
        self.label_Help.setObjectName("label_Help")

        # Adding a mousePressEvent to the label
        self.label_Help.mousePressEvent = lambda event: self.show_help_window()
        MainWindow.setCentralWidget(self.centralwidget)

        self.label_SecondLabel = QtWidgets.QLabel(self.centralwidget)
        self.label_SecondLabel.setGeometry(QtCore.QRect(90, 10, 441, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label_SecondLabel.setFont(font)
        self.label_SecondLabel.setStyleSheet("QLabel { \n"
"    color : white;\n"
"}")
        self.label_SecondLabel.setText("")
        self.label_SecondLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_SecondLabel.setObjectName("label_SecondLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 560, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # Functionality
    # Function to show the help window
    def show_help_window(self):
        self.help_window = HelpWindow()  # Vytvoření instance okna pro nápovědu
        self.help_window.exec_()  # Zobrazení okna pro nápovědu

    # Function to delete the last character in the label
    def delete(self):
        currentText = self.label_SecondLabel.text()
        
        # If the last character is a square root or a power of 2, remove the last 2 characters
        if currentText[-2:] == '²√' or currentText[-2:] == '^2':
            currentText = currentText[:-2]
        else:
            currentText = currentText[:-1]

        self.label_SecondLabel.setText(currentText)
        return

    # Function to clear all the labels
    def clear_all(self):
        self.label_MainLabel.setText("")
        self.label_SecondLabel.setText("")
        return

    # Function to add the pressed button to the label
    def pressed(self, pressed):
        """!Adds the pressed button to the label.

        @param pressed: The value of the pressed button.
        @type pressed: str

        @return: None
        """
        currentTextInSecondLabel = self.label_SecondLabel.text()
        currentTextInMainLabel = self.label_MainLabel.text()
        operators = ['+', '-', '×', '÷', '^', '^2', '²√', '√', '!', '%']
        operatorsWithouMinus = ['+', '×', '÷', '^', '^2', '²√', '√', '!', '%']
        operatorsWithoutSquareRoot = ['+', '-', '×', '÷', '^', '^2', '√', '!', '%']

        # ANS for operators without square root
        if currentTextInMainLabel and pressed in operatorsWithoutSquareRoot:
            if currentTextInMainLabel in {"SYNTAX ERROR", "ERROR", "MATH ERROR"}:
                return
            self.label_SecondLabel.setText(f'{currentTextInMainLabel}{pressed}')
            self.label_MainLabel.setText("")
            return
        
        # ANS for square root
        if currentTextInMainLabel and pressed == '²√':
            if currentTextInMainLabel in {"SYNTAX ERROR", "ERROR", "MATH ERROR"}:
                self.label_SecondLabel.setText(f'{pressed}')
                self.label_MainLabel.setText("")
                return
            self.label_SecondLabel.setText(f'{pressed}{currentTextInMainLabel}')
            self.label_MainLabel.setText("")
            return

        # ANS for numbers
        if currentTextInMainLabel and pressed not in operators:
            self.label_SecondLabel.setText(f'{pressed}')
            self.label_MainLabel.setText("")
            return

        # If the second label is empty and the pressed button is an operator, than set to second label a minus 
        if pressed == '-' and not currentTextInSecondLabel:
            self.label_SecondLabel.setText('-')
            return
        # If the pressed button is an operator and the second label is empty, return
        elif pressed in operatorsWithoutSquareRoot and not currentTextInSecondLabel:
           return
        # If the pressed button is an operator and last char in second label is a minus, return
        elif pressed in operatorsWithoutSquareRoot and currentTextInSecondLabel[-1] == '-':
           return
        elif pressed == '-':
            self.label_SecondLabel.setText(f'{currentTextInSecondLabel}{pressed}')
            return

        # Decimal point
        if pressed == '.':
            for operator in operators:
                # Split the current text in the second label by the operators
                numList = currentTextInSecondLabel.split(operator)
                # If there is a operator in SecondLabel and '.' is not in last number, add the decimal point
                if operator in currentTextInSecondLabel and '.' not in numList[-1]:
                    self.label_SecondLabel.setText(f'{currentTextInSecondLabel}{pressed}')
                    return
            # If there is '.' in second label, return
            if '.' in currentTextInSecondLabel:
                    return


        # If the user tries to add an operator and there is already an operator, but minus is allowed, return
        if (pressed in operatorsWithoutSquareRoot) and any(op in currentTextInSecondLabel for op in operatorsWithouMinus):
            return
        
        # If the user tries write something after factorial or second power, return
        if currentTextInSecondLabel.endswith('!') or currentTextInSecondLabel.endswith('^2'):
            return

        # If the user tries to add a factorial and there is minus in the label, return
        if pressed == '!' and '-' in currentTextInSecondLabel:
            return

        # If the user tries to add a square root and there is already something in the label, return
        if pressed == '²√' and currentTextInSecondLabel:
            return
        
        self.label_SecondLabel.setText(f'{currentTextInSecondLabel}{pressed}')
        return

    # Function to solve the expression
    def solve_expression(self):
        currentTextInSecondLabel = self.label_SecondLabel.text()
        operators = ['+', '-', '×', '÷', '^', '^2', '²√', '√', '!', '%']
        operatorsForTwoNumbers = ['+', '-', '×', '÷', '^', '√', '%']
        
        # If the second label is empty, return
        if not currentTextInSecondLabel:
            return

        # If first char is minus a there is onlu one minus in the label and there is no operator, than set the main label to the second label
        if (currentTextInSecondLabel[0] == '-' and currentTextInSecondLabel.count('-') == 1 and not any(op in currentTextInSecondLabel[1:] for op in operators)):
            self.label_MainLabel.setText(currentTextInSecondLabel)
            return
        elif currentTextInSecondLabel and not any(op in currentTextInSecondLabel[1:] for op in operators):
            self.label_MainLabel.setText(currentTextInSecondLabel)
            return
                
        # If there is an operator for two numbers and there is no second number, than SYNTAX ERROR
        for operator in operatorsForTwoNumbers:
            if currentTextInSecondLabel.endswith(operator):
                self.label_SecondLabel.setText('')
                self.label_MainLabel.setText("SYNTAX ERROR")
                return

        # If there is an operator for two numbers in the label, split the label by the operator
        for operator in operatorsForTwoNumbers:
            # If there is a minut at the beginning of the label, split the label by the second operator
            if currentTextInSecondLabel[0] == '-':
                # If there is an operator in the label (without first char), split the label by the operator
                if operator in currentTextInSecondLabel[1:]:
                    numList = currentTextInSecondLabel[1:].split(operator)
                    number1 = currentTextInSecondLabel[0] + numList[0]
                    # If there is a decimal point at the end of the number, add 0
                    if number1[-1] == '.':
                        number1 += '0'
                    number2 = numList[1]
                    if number2[-1] == '.':
                        number2 += '0'
                    operatorMain = operator    
            elif operator in currentTextInSecondLabel:
                numList = currentTextInSecondLabel.split(operator)
                number1 = numList[0]
                # If there is a decimal point at the end of the number, add 0
                if number1[-1] == '.':
                        number1 += '0'
                number2 = numList[1]
                if number2[-1] == '.':
                        number2 += '0'
                operatorMain = operator
        
        # If there is a second power in the label, split the label by the second power
        if '^2' in currentTextInSecondLabel:
            numList = currentTextInSecondLabel.split('^2')
            number1 = numList[0]
            operatorMain = '^2'

        # If there is a factorial in the label, split the label by the factorial
        if '!' in currentTextInSecondLabel:
            numList = currentTextInSecondLabel.split('!')
            number1 = numList[0]
            operatorMain = '!'

        # If there is a square root in the label, split the label by the square root
        if '²√' in currentTextInSecondLabel:
            numList = currentTextInSecondLabel.split('²√')
            number1 = numList[1]
            operatorMain = '²√'

        match operatorMain:
            case '+':
                try:
                    result = CalculatorMathLib.add(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '-':
                try:
                    result = CalculatorMathLib.sub(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '×':
                try:
                    result = CalculatorMathLib.multiply(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '÷':
                try:
                    result = CalculatorMathLib.div(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '^':
                try:
                    result = CalculatorMathLib.power(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '√':
                try:
                    result = CalculatorMathLib.root(float(number2), float(number1))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '%':
                try:
                    result = CalculatorMathLib.modulo(float(number1), float(number2))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '^2':
                try:
                    result = CalculatorMathLib.pow2(float(number1))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '²√':
                try:
                    result = CalculatorMathLib.sqrt(float(number1))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            case '!':
                try:
                    result = CalculatorMathLib.factorial(float(number1))
                    self.label_MainLabel.setText(f'{result}')
                except ValueError as error:
                    self.label_MainLabel.setText(f'{error}')
                return
            

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.pushButton_NthRoot.setText(_translate("MainWindow", "ⁿ√"))
        self.pushButton_Plus.setText(_translate("MainWindow", "+"))
        self.pushButton_3.setText(_translate("MainWindow", "3"))
        self.pushButton_NthPower.setText(_translate("MainWindow", "xⁿ"))
        self.pushButton_Minus.setText(_translate("MainWindow", "-"))
        self.pushButton_DoubleNull.setText(_translate("MainWindow", "00"))
        self.pushButton_Equal.setText(_translate("MainWindow", "="))
        self.pushButton_SquareRoot.setText(_translate("MainWindow", "²√"))
        self.pushButton_Point.setText(_translate("MainWindow", "."))
        self.pushButton_Null.setText(_translate("MainWindow", "0"))
        self.pushButton_1.setText(_translate("MainWindow", "1"))
        self.pushButton_Division.setText(_translate("MainWindow", "÷"))
        self.pushButton_Factorial.setText(_translate("MainWindow", "x!"))
        self.pushButton_8.setText(_translate("MainWindow", "8"))
        self.pushButton_4.setText(_translate("MainWindow", "4"))
        self.pushButton_AllClear.setText(_translate("MainWindow", "AC"))
        self.pushButton_2.setText(_translate("MainWindow", "2"))
        self.pushButton_7.setText(_translate("MainWindow", "7"))
        self.pushButton_9.setText(_translate("MainWindow", "9"))
        self.pushButton_5.setText(_translate("MainWindow", "5"))
        self.pushButton_Delete.setText(_translate("MainWindow", "DEL"))
        self.pushButton_6.setText(_translate("MainWindow", "6"))
        self.pushButton_Multiply.setText(_translate("MainWindow", "×"))
        self.pushButton_SecondPower.setText(_translate("MainWindow", "x²"))
        self.label_Help.setText(_translate("MainWindow", "HELP"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
